{"version":3,"file":"async-graph.js","mappings":"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","sources":["webpack:///./src/utils/ResizeDetector.js","webpack:///./src/fragments/Graph.react.js"],"sourcesContent":["import React, {createRef, useEffect, useCallback, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\n// Debounce 50 ms\nconst DELAY = 50;\n\nlet resizeTimeout;\n\nconst ResizeDetector = props => {\n    const {onResize, children, targets} = props;\n    const ref = createRef();\n\n    const debouncedResizeHandler = useCallback(() => {\n        if (resizeTimeout) {\n            clearTimeout(resizeTimeout);\n        }\n        resizeTimeout = setTimeout(() => {\n            onResize(true); // Force on resize.\n        }, DELAY);\n    }, [onResize]);\n\n    const observer = useMemo(\n        () => new ResizeObserver(debouncedResizeHandler),\n        [onResize]\n    );\n\n    useEffect(() => {\n        if (!ref.current) {\n            return () => {};\n        }\n        targets.forEach(target => observer.observe(target.current));\n        observer.observe(ref.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, [ref.current]);\n\n    return <div ref={ref}>{children}</div>;\n};\n\nResizeDetector.propTypes = {\n    onResize: PropTypes.func,\n    children: PropTypes.node,\n    targets: PropTypes.any,\n};\n\nexport default ResizeDetector;\n","import lazyLoadMathJax from '../utils/LazyLoader/mathjax';\nimport React, {Component} from 'react';\nimport {\n    equals,\n    filter,\n    has,\n    includes,\n    isNil,\n    mergeDeepRight,\n    omit,\n    type,\n} from 'ramda';\nimport PropTypes from 'prop-types';\nimport {graphPropTypes, graphDefaultProps} from '../components/Graph.react';\n\nimport LoadingElement from '../utils/LoadingElement';\n\n/* global Plotly:true */\n\nimport ResizeDetector from '../utils/ResizeDetector';\n\n/**\n * `autosize: true` causes Plotly.js to conform to the parent element size.\n * This is necessary for `dcc.Graph` call to `Plotly.Plots.resize(target)` to do something.\n *\n * Users can override this value for specific use-cases by explicitly passing `autoresize: true`\n * if `responsive` is not set to True.\n */\nconst RESPONSIVE_LAYOUT = {\n    autosize: true,\n    height: undefined,\n    width: undefined,\n};\n\nconst AUTO_LAYOUT = {};\n\nconst UNRESPONSIVE_LAYOUT = {\n    autosize: false,\n};\n\n/**\n * `responsive: true` causes Plotly.js to resize the graph on `window.resize`.\n * This is necessary for `dcc.Graph` call to `Plotly.Plots.resize(target)` to do something.\n *\n * Users can override this value for specific use-cases by explicitly passing `responsive: false`\n * if `responsive` is not set to True.\n */\nconst RESPONSIVE_CONFIG = {\n    responsive: true,\n};\n\nconst AUTO_CONFIG = {};\n\nconst UNRESPONSIVE_CONFIG = {\n    responsive: false,\n};\n\nconst filterEventData = (gd, eventData, event) => {\n    let filteredEventData;\n    if (includes(event, ['click', 'hover', 'selected'])) {\n        const points = [];\n\n        if (isNil(eventData)) {\n            return null;\n        }\n\n        /*\n         * remove `data`, `layout`, `xaxis`, etc\n         * objects from the event data since they're so big\n         * and cause JSON stringify ciricular structure errors.\n         *\n         * also, pull down the `customdata` point from the data array\n         * into the event object\n         */\n        const data = gd.data;\n\n        for (let i = 0; i < eventData.points.length; i++) {\n            const fullPoint = eventData.points[i];\n            const pointData = filter(function (o) {\n                return !includes(type(o), ['Object', 'Array']);\n            }, fullPoint);\n\n            // permit a bounding box to pass through, if present\n            if (has('bbox', fullPoint)) {\n                pointData.bbox = fullPoint.bbox;\n            }\n\n            if (\n                has('curveNumber', fullPoint) &&\n                has('customdata', data[pointData.curveNumber])\n            ) {\n                if (has('pointNumber', fullPoint)) {\n                    if (typeof fullPoint.pointNumber === 'number') {\n                        pointData.customdata =\n                            data[pointData.curveNumber].customdata[\n                                fullPoint.pointNumber\n                            ];\n                    } else if (\n                        !fullPoint.pointNumber &&\n                        fullPoint.data.mode.includes('lines')\n                    ) {\n                        pointData.customdata =\n                            data[pointData.curveNumber].customdata;\n                    }\n                } else if (has('pointNumbers', fullPoint)) {\n                    pointData.customdata = fullPoint.pointNumbers.map(function (\n                        point\n                    ) {\n                        return data[pointData.curveNumber].customdata[point];\n                    });\n                }\n            }\n\n            // specific to histogram. see https://github.com/plotly/plotly.js/pull/2113/\n            if (has('pointNumbers', fullPoint)) {\n                pointData.pointNumbers = fullPoint.pointNumbers;\n            }\n\n            points[i] = pointData;\n        }\n        filteredEventData = {points};\n    } else if (event === 'relayout' || event === 'restyle') {\n        /*\n         * relayout shouldn't include any big objects\n         * it will usually just contain the ranges of the axes like\n         * \"xaxis.range[0]\": 0.7715822247381828,\n         * \"xaxis.range[1]\": 3.0095292008680063`\n         */\n        filteredEventData = eventData;\n    }\n    if (has('range', eventData)) {\n        filteredEventData.range = eventData.range;\n    }\n    if (has('lassoPoints', eventData)) {\n        filteredEventData.lassoPoints = eventData.lassoPoints;\n    }\n    return filteredEventData;\n};\n\n/**\n * Graph can be used to render any plotly.js-powered data visualization.\n *\n * You can define callbacks based on user interaction with Graphs such as\n * hovering, clicking or selecting\n */\nclass PlotlyGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.gd = React.createRef();\n        this._hasPlotted = false;\n        this._prevGd = null;\n        this._queue = Promise.resolve();\n\n        this.parentElement = React.createRef();\n\n        this.bindEvents = this.bindEvents.bind(this);\n        this.getConfig = this.getConfig.bind(this);\n        this.getConfigOverride = this.getConfigOverride.bind(this);\n        this.getLayout = this.getLayout.bind(this);\n        this.getLayoutOverride = this.getLayoutOverride.bind(this);\n        this.graphResize = this.graphResize.bind(this);\n        this.isResponsive = this.isResponsive.bind(this);\n        this.amendTraces = this.amendTraces.bind(this);\n\n        this.state = {override: {}, originals: {}};\n    }\n\n    plot(props) {\n        let {figure, config} = props;\n        const {animate, animation_options, responsive, mathjax} = props;\n\n        const gd = this.gd.current;\n        figure = props._dashprivate_transformFigure(figure, gd);\n        config = props._dashprivate_transformConfig(config, gd);\n\n        const configClone = this.getConfig(config, responsive);\n        // add typesetMath | not exposed to the dash API\n        configClone.typesetMath = mathjax;\n\n        const figureClone = {\n            data: figure?.data,\n            layout: this.getLayout(figure?.layout, responsive),\n            frames: figure?.frames,\n            config: configClone,\n        };\n\n        if (\n            animate &&\n            this._hasPlotted &&\n            figure.data.length === gd.data.length\n        ) {\n            // in case we've have figure frames,\n            // we need to recreate frames before animation\n            if (figure.frames) {\n                return Plotly.deleteFrames(gd)\n                    .then(() => Plotly.addFrames(gd, figure.frames))\n                    .then(() =>\n                        Plotly.animate(gd, figureClone, animation_options)\n                    );\n            }\n            return Plotly.animate(gd, figureClone, animation_options);\n        }\n\n        gd.classList.add('dash-graph--pending');\n\n        return lazyLoadMathJax(mathjax)\n            .then(() => {\n                const gd = this.gd.current;\n                return gd && Plotly.react(gd, figureClone);\n            })\n            .then(() => {\n                const gd = this.gd.current;\n\n                // double-check gd hasn't been unmounted\n                if (!gd) {\n                    return;\n                }\n\n                gd.classList.remove('dash-graph--pending');\n\n                // in case we've made a new DOM element, transfer events\n                if (this._hasPlotted && gd !== this._prevGd) {\n                    if (this._prevGd && this._prevGd.removeAllListeners) {\n                        this._prevGd.removeAllListeners();\n                        Plotly.purge(this._prevGd);\n                    }\n                    this._hasPlotted = false;\n                }\n\n                if (!this._hasPlotted) {\n                    this.bindEvents();\n                    this.graphResize(true);\n                    this._hasPlotted = true;\n                    this._prevGd = gd;\n                }\n            });\n    }\n\n    amendTraces(p, oldProps, newProps) {\n        const {prependData: oldPrepend, extendData: oldExtend} = oldProps;\n        const {prependData: newPrepend, extendData: newExtend} = newProps;\n        const _this = this;\n\n        function mergeTraces(props, dataKey, plotlyFnKey) {\n            const clearState = props.clearState;\n            const dataArray = props[dataKey];\n\n            let _p = Promise.resolve();\n\n            dataArray.forEach(data => {\n                let updateData, traceIndices, maxPoints;\n                if (Array.isArray(data) && typeof data[0] === 'object') {\n                    [updateData, traceIndices, maxPoints] = data;\n                } else {\n                    updateData = data;\n                }\n\n                if (!traceIndices) {\n                    function getFirstProp(data) {\n                        return data[Object.keys(data)[0]];\n                    }\n\n                    function generateIndices(data) {\n                        return Array.from(\n                            Array(getFirstProp(data).length).keys()\n                        );\n                    }\n                    traceIndices = generateIndices(updateData);\n                }\n\n                _p = _p.then(() => {\n                    const gd = _this.gd.current;\n                    return (\n                        gd &&\n                        Plotly[plotlyFnKey](\n                            gd,\n                            updateData,\n                            traceIndices,\n                            maxPoints\n                        )\n                    );\n                });\n            });\n\n            return _p.then(() => clearState(dataKey));\n        }\n\n        let modified = false;\n\n        if (newPrepend?.length && oldPrepend !== newPrepend) {\n            modified = true;\n            p = p.then(() =>\n                mergeTraces(newProps, 'prependData', 'prependTraces')\n            );\n        }\n\n        if (newExtend?.length && oldExtend !== newExtend) {\n            modified = true;\n            p = p.then(() =>\n                mergeTraces(newProps, 'extendData', 'extendTraces')\n            );\n        }\n\n        if (modified) {\n            p = p.then(() =>\n                newProps._dashprivate_onFigureModified(newProps.figure)\n            );\n        }\n\n        return p;\n    }\n\n    getConfig(config, responsive) {\n        return mergeDeepRight(config, this.getConfigOverride(responsive));\n    }\n\n    getLayout(layout, responsive) {\n        if (!layout) {\n            return layout;\n        }\n        const override = this.getLayoutOverride(responsive);\n        const {override: prev_override, originals: prev_originals} = this.state;\n        // Store the original data that we're about to override\n        const originals = {};\n        for (const key in override) {\n            if (layout[key] !== prev_override[key]) {\n                originals[key] = layout[key];\n            } else if (prev_originals.hasOwnProperty(key)) {\n                originals[key] = prev_originals[key];\n            }\n        }\n        this.setState({override, originals});\n        // Undo the previous override, but only for keys that the user did not change\n        for (const key in prev_originals) {\n            if (layout[key] === prev_override[key]) {\n                layout[key] = prev_originals[key];\n            }\n        }\n        // Apply the current override\n        for (const key in override) {\n            layout[key] = override[key];\n        }\n        return layout; // not really a clone\n    }\n\n    getConfigOverride(responsive) {\n        switch (responsive) {\n            case false:\n                return UNRESPONSIVE_CONFIG;\n            case true:\n                return RESPONSIVE_CONFIG;\n            default:\n                return AUTO_CONFIG;\n        }\n    }\n\n    getLayoutOverride(responsive) {\n        switch (responsive) {\n            case false:\n                return UNRESPONSIVE_LAYOUT;\n            case true:\n                return RESPONSIVE_LAYOUT;\n            default:\n                return AUTO_LAYOUT;\n        }\n    }\n\n    isResponsive(props) {\n        const {config, figure, responsive} = props;\n\n        if (type(responsive) === 'Boolean') {\n            return responsive;\n        }\n\n        return Boolean(\n            config.responsive &&\n                (!figure.layout ||\n                    ((figure.layout.autosize ||\n                        isNil(figure.layout.autosize)) &&\n                        (isNil(figure.layout.height) ||\n                            isNil(figure.layout.width))))\n        );\n    }\n\n    graphResize(force = false) {\n        if (!force && !this.isResponsive(this.props)) {\n            return;\n        }\n\n        const gd = this.gd.current;\n        if (!gd) {\n            return;\n        }\n\n        gd.classList.add('dash-graph--pending');\n\n        Plotly.Plots.resize(gd)\n            .catch(() => {})\n            .finally(() => gd.classList.remove('dash-graph--pending'));\n    }\n\n    bindEvents() {\n        const {\n            setProps,\n            clear_on_unhover,\n            relayoutData,\n            restyleData,\n            hoverData,\n            selectedData,\n        } = this.props;\n\n        const gd = this.gd.current;\n\n        gd.on('plotly_click', eventData => {\n            const clickData = filterEventData(gd, eventData, 'click');\n            if (!isNil(clickData)) {\n                setProps({clickData});\n            }\n        });\n        gd.on('plotly_clickannotation', eventData => {\n            const clickAnnotationData = omit(\n                ['event', 'fullAnnotation'],\n                eventData\n            );\n            setProps({clickAnnotationData});\n        });\n        gd.on('plotly_hover', eventData => {\n            const hover = filterEventData(gd, eventData, 'hover');\n            if (!isNil(hover) && !equals(hover, hoverData)) {\n                setProps({hoverData: hover});\n            }\n        });\n        gd.on('plotly_selected', eventData => {\n            const selected = filterEventData(gd, eventData, 'selected');\n            if (!isNil(selected) && !equals(selected, selectedData)) {\n                setProps({selectedData: selected});\n            }\n        });\n        gd.on('plotly_deselect', () => {\n            setProps({selectedData: null});\n        });\n        gd.on('plotly_relayout', eventData => {\n            const relayout = filterEventData(gd, eventData, 'relayout');\n            if (!isNil(relayout) && !equals(relayout, relayoutData)) {\n                setProps({relayoutData: relayout});\n            }\n        });\n        gd.on('plotly_restyle', eventData => {\n            const restyle = filterEventData(gd, eventData, 'restyle');\n            if (!isNil(restyle) && !equals(restyle, restyleData)) {\n                setProps({restyleData: restyle});\n            }\n        });\n        gd.on('plotly_unhover', () => {\n            if (clear_on_unhover) {\n                setProps({hoverData: null});\n            }\n        });\n    }\n\n    componentDidMount() {\n        const p = this.plot(this.props);\n        this._queue = this.amendTraces(p, {}, this.props);\n    }\n\n    componentWillUnmount() {\n        const gd = this.gd.current;\n        if (gd && gd.removeAllListeners) {\n            gd.removeAllListeners();\n            if (this._hasPlotted) {\n                Plotly.purge(gd);\n            }\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            this.props.id !== nextProps.id ||\n            JSON.stringify(this.props.style) !== JSON.stringify(nextProps.style)\n        );\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        const idChanged = this.props.id !== nextProps.id;\n        if (idChanged) {\n            /*\n             * then the dom needs to get re-rendered with a new ID.\n             * the graph will get updated in componentDidUpdate\n             */\n            return;\n        }\n\n        let p = this._queue;\n\n        if (\n            this.props.mathjax !== nextProps.mathjax ||\n            this.props.figure !== nextProps.figure ||\n            this.props._dashprivate_transformConfig !==\n                nextProps._dashprivate_transformConfig ||\n            this.props._dashprivate_transformFigure !==\n                nextProps._dashprivate_transformFigure\n        ) {\n            p = p.then(() => this.plot(nextProps));\n        }\n\n        this._queue = this.amendTraces(p, this.props, nextProps);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.id !== this.props.id ||\n            prevProps.mathjax !== this.props.mathjax\n        ) {\n            this._queue = this._queue.then(() => this.plot(this.props));\n        }\n    }\n\n    render() {\n        const {className, id, style} = this.props;\n\n        return (\n            <LoadingElement\n                id={id}\n                key={id}\n                className={className}\n                style={style}\n                ref={this.parentElement}\n            >\n                <ResizeDetector\n                    onResize={this.graphResize}\n                    targets={[this.parentElement, this.gd]}\n                />\n                <div ref={this.gd} style={{height: '100%', width: '100%'}} />\n            </LoadingElement>\n        );\n    }\n}\n\nPlotlyGraph.propTypes = {\n    ...graphPropTypes,\n    prependData: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n    ),\n    extendData: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n    ),\n    clearState: PropTypes.func.isRequired,\n};\n\nPlotlyGraph.defaultProps = {\n    ...graphDefaultProps,\n    prependData: [],\n    extendData: [],\n};\n\nexport default PlotlyGraph;\n"],"names":["resizeTimeout","ResizeDetector","props","onResize","children","targets","ref","createRef","debouncedResizeHandler","useCallback","clearTimeout","setTimeout","observer","useMemo","ResizeObserver","useEffect","current","forEach","target","observe","disconnect","React","propTypes","PropTypes","RESPONSIVE_LAYOUT","autosize","height","undefined","width","AUTO_LAYOUT","UNRESPONSIVE_LAYOUT","RESPONSIVE_CONFIG","responsive","AUTO_CONFIG","UNRESPONSIVE_CONFIG","filterEventData","gd","eventData","event","filteredEventData","includes","points","isNil","data","_loop","fullPoint","i","pointData","filter","o","type","has","bbox","curveNumber","pointNumber","customdata","mode","pointNumbers","map","point","length","range","lassoPoints","PlotlyGraph","_Component","_this2","_classCallCheck","_callSuper","_hasPlotted","_prevGd","_queue","Promise","resolve","parentElement","bindEvents","bind","getConfig","getConfigOverride","getLayout","getLayoutOverride","graphResize","isResponsive","amendTraces","state","override","originals","_inherits","key","value","_figure","_figure2","_figure3","_this3","figure","config","animate","animation_options","mathjax","this","_dashprivate_transformFigure","_dashprivate_transformConfig","configClone","typesetMath","figureClone","layout","frames","Plotly","deleteFrames","then","addFrames","classList","add","lazyLoadMathJax","react","remove","removeAllListeners","purge","p","oldProps","newProps","oldPrepend","prependData","oldExtend","extendData","newPrepend","newExtend","_this","mergeTraces","dataKey","plotlyFnKey","clearState","dataArray","_p","updateData","traceIndices","maxPoints","Array","isArray","_data","_slicedToArray","from","Object","keys","getFirstProp","generateIndices","modified","_dashprivate_onFigureModified","mergeDeepRight","_this$state","prev_override","prev_originals","hasOwnProperty","setState","Boolean","arguments","Plots","resize","catch","finally","_this$props","setProps","clear_on_unhover","relayoutData","restyleData","hoverData","selectedData","on","clickData","clickAnnotationData","omit","hover","equals","selected","relayout","restyle","plot","nextProps","id","JSON","stringify","style","_this4","prevProps","_this5","_this$props2","className","LoadingElement","Component","_objectSpread","graphPropTypes","isRequired","defaultProps","graphDefaultProps"],"sourceRoot":""}